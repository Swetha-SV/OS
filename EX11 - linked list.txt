					EX-11


[21bcs033@mepcolinux FILE]$cat Ex11.prn 
Script started on Wednesday 18 October 2023 04:20:33 PM IST
[21bcs033@mepcolinux FILE]$cat head.h
/*
 * C program to implement non-contiguous memory allocation using linked list
 * */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define MAX 50
struct Block {
    int start;
    int end;
    int size;
    int len;
    int isOccupied;
    char filename[MAX];
    struct num* next;
};
struct num
{
	int n;
	struct num* next;
};
void initializeBitVector(int* bitVector, int numBlocks);
void displayBitVector(int* bitVector, int numBlocks);
void displayfileallocated(struct Block *file,int index);
int allocateFile(struct Block  *file, char* filename, int fileSize, int* bitVector, int numBlocks,int index,int blockSize);
[21bcs033@mepcolinux FILE]$cat imp.c

#include "head.h"
void initializeBitVector(int* bitVector, int numBlocks) 
{
	int i;
    for (i = 0; i < numBlocks; i++) 
	{
        bitVector[i] = 1;
    }
}
void displayBitVector(int* bitVector, int numBlocks) 
{
    printf("\n\tBit Vector\n");
    printf("\n1 - UNALLOCATED\n0 - ALLOCATED\n\n");
    int i;
    for (i = 0; i < numBlocks; i++) {
        printf("%d ", bitVector[i]);
    }
    printf("\n");
}
void displayfileallocated(struct Block *file,int index)
{
		int i;
		for(i=0;i<index;i++)
		{
			printf("\n%s\t%d\t",file[i].filename,file[i].size);
			struct num* temp= file[i].next;	
			printf("%d,",temp->n);			
			while(temp->next != NULL)
			{	
				temp = temp->next;		
				printf("%d,",temp->n);
													
			}
			printf("\t\t\t%d\t%d\t%d\n\n",file[i].start,file[i].end,file[i].len);
		}
}
int allocateFile(struct Block  *file, char* filename, int fileSize, int* bitVector, int numBlocks,int index,int blockSize) 
{

    int startBlock,k,i;
    file[index].size=fileSize;
    strncpy(file[index].filename, filename, MAX);
    file[index].isOccupied = 0;
    int numRequiredBlocks ;
    for(i=0;i<numBlocks;i++)
    {
        if(file[index].size<=(i*blockSize))
        {
            numRequiredBlocks=i;
            break;
         }
     }
     printf("\nTotal  no of Blocks Required : %d\n",numRequiredBlocks);
    int random,free=0;
    for(i=0;i<numBlocks;i++)
    {
    	if(bitVector[i]==1)
    		free++;
	}
	if(numRequiredBlocks >free)
	{
		
		return 0;
	}
	else
	{
		file[index].len=0;
		while(numRequiredBlocks!=0 )
    	{
    		do
    		{	
    			random=rand()%numBlocks;
			}while(bitVector[random]==0);
			bitVector[random]=0;
			if(file[index].len == 0)
			{
				file[index].start=random;
				struct num* n1 = (struct num*)malloc(sizeof(struct num));
				n1->n=random;
				file[index].len++;
				file[index].next=n1;
				file[index].next->next=NULL;
			}
			else
			{
				struct num* n1 = (struct num*)malloc(sizeof(struct num));
				n1->n=random;
				n1->next=NULL;	
				struct num* temp;
				temp=file[index].next;		
				while(temp->next != NULL)
				{
						
					temp = temp->next;							
				}
				temp->next=n1;	
				file[index].len++;
			}
			if(numRequiredBlocks == 1)
			{
				file[index].end=random;
			}
			numRequiredBlocks--;
			
        }
        file[index].isOccupied = 1;
		return 1;
	}
    return 0;
}
[21bcs033@mepcolinux FILE]$cat app.c
#include "head.h"
int main() 
{
	printf("\n\n\tIMPLEMENTATION OF FILE ALLOCATION TECHNIQUE\n\n");
    int totalMemoryCapacity, blockSize;
    printf("Give the total memory capacity: ");
    scanf("%d", &totalMemoryCapacity);
    printf("Give the size of a single block: ");
    scanf("%d",&blockSize);
    int numBlocks = totalMemoryCapacity / blockSize;
	printf("\nTotal  no of Blocks in the memory : %d\n",numBlocks);
    int* bitVector = (int*)malloc(numBlocks * sizeof(int));
    initializeBitVector(bitVector, numBlocks);
    srand(time(NULL));
    struct Block *file;
    file=(struct Block *)malloc(MAX*sizeof(struct Block *));
    int index=0;
    while (1) 
	{
		printf("**********************************************\nMENU\n");
        printf("\n1.Allocate File\n2.Display Allocated files\n3.Display Bit Vector\n4.Exit\n");
        printf("**********************************************\n\n");
        int choice;
        char filename[MAX];
        int fileSize;
        printf("Give your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
            {	printf("\n\n\tFILE ALLOCATION\n\n");
                printf("Give the file name: ");
                scanf("%s", filename);
                printf("Give file size: ");
                scanf("%d", &fileSize);
                int allocationResult = allocateFile(file, filename, fileSize, bitVector, numBlocks,index,blockSize);
                if (allocationResult) 
				{
                    printf("\nFile '%s' has been allocated successfully\n", filename);
                    index++;
                } 
				else 
				{
                    printf("\nFile %s' cannot be allocated\n", filename);
                }
                break;
        	}
            case 2:
            	
            	if(index != 0)
            	{
            		printf("\n\n\tALLOCATED FILE IN MEMORY\n\n");
                	printf("NAME\tSIZE\tBLOCKS ALLOCATED\tSTART\tEND\tLENGTH\n");
            		displayfileallocated(file,index);
				}
				else
					printf("\n\n Memory blocks are Empty\n\n");
            	
            	break;

            case 3:
               displayBitVector(bitVector, numBlocks);
                break;

            case 4:
            	printf("Exited\n");
                exit(0);

            default:
                printf("Invalid choice\n");
                break;
        }
    }

    free(bitVector);
    free(file);
    return 0;
}

[21bcs033@mepcolinux FILE]$make
make: `file' is up to date.
[21bcs033@mepcolinux FILE]$./file 


	IMPLEMENTATION OF FILE ALLOCATION TECHNIQUE

Give the total memory capacity: 150
Give the size of a single block: 10

Total  no of Blocks in the memory : 15
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 1


	FILE ALLOCATION

Give the file name: os.docs
Give file size: 34

Total  no of Blocks Required : 4

File 'os.docs' has been allocated successfully
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 2


	ALLOCATED FILE IN MEMORY

NAME	SIZE	BLOCKS ALLOCATED	START	END	LENGTH

os.docs	34	5,7,8,11,			5	11	4

**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 3

	Bit Vector

1 - UNALLOCATED
0 - ALLOCATED

1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 1


	FILE ALLOCATION

Give the file name: ex1.c
Give file size: 46

Total  no of Blocks Required : 5

File 'ex1.c' has been allocated successfully
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 2


	ALLOCATED FILE IN MEMORY

NAME	SIZE	BLOCKS ALLOCATED	START	END	LENGTH

os.docs	34	5,7,8,11,			5	11	4


ex1.c	46	6,9,2,13,12,			6	12	5

**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 3

	Bit Vector

1 - UNALLOCATED
0 - ALLOCATED

1 1 0 1 1 0 0 0 0 0 1 0 0 0 1 
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 1


	FILE ALLOCATION

Give the file name: java1.java
Give file size: 116

Total  no of Blocks Required : 12

File java1.java' cannot be allocated
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 2


	ALLOCATED FILE IN MEMORY

NAME	SIZE	BLOCKS ALLOCATED	START	END	LENGTH

os.docs	34	5,7,8,11,			5	11	4


ex1.c	46	6,9,2,13,12,			6	12	5

**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 3

	Bit Vector

1 - UNALLOCATED
0 - ALLOCATED

1 1 0 1 1 0 0 0 0 0 1 0 0 0 1 
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 4
Exited
[21bcs033@mepcolinux FILE]$exit
exit

