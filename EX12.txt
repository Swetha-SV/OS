

					EX-12

[21bcs033@mepcolinux DIR]$cat Ex12.prn 
Script started on Thursday 19 October 2023 04:02:11 PM IST
[21bcs033@mepcolinux DIR]$cat head.h
/*
 * C program to implement file organization technique like Directory creation,Adding file into the Directory
 * Search for a Directory,Search for a file,Delete a File,Delete a Directory,Contents in a Directory
 * */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct File
{
    char name[100];
    struct File* next;
} File;
typedef struct Directory
{
    char name[100];
    File* files;
} Directory;
Directory* directories[100];
File* createFile(char name[]);
Directory* createDirectory(char name[]);
void addFileToDirectory(Directory* dir, char fileName[]);
void listAllDirectories(int numDirectories);
Directory* findDirectory(char name[], int numDirectories);
void displayDirectoryContents(int numDirectories,Directory* dir);
int deleteDirectory(char* dirName, int numDirectories);
void deleteFileFromDirectory(Directory* dir, char* fileName);

[21bcs033@mepcolinux DIR]$cat imp.c
#include "head.h"
File* createFile(char name[])
{
    File* newFile = (File*)malloc(sizeof(File));
    if (newFile == NULL)
    {
        printf("Memory allocation failed for file.\n");
        exit(1);
    }
    strcpy(newFile->name, name);
    newFile->next = NULL;
    return newFile;
}
Directory* createDirectory(char name[])
{
    Directory* newDir = (Directory*)malloc(sizeof(Directory));
    if (newDir == NULL)
    {
        printf("Memory allocation failed for directory.\n");
        exit(1);
    }
    strcpy(newDir->name, name);
    newDir->files = NULL;
    return newDir;
}
void addFileToDirectory(Directory* dir, char fileName[])
{
    File* newFile = createFile(fileName);
    if (dir->files == NULL)
    {
        dir->files = newFile;
    }
    else
    {
        File* current = dir->files;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newFile;
    }
}
void listAllDirectories(int numDirectories)
{
    int i;
    if (numDirectories == 0)
    {
        printf("\nNo directories found\n");
        return;
    }
    printf("\n\tAvailable Directories\n\n");
    for (i = 0; i < numDirectories; i++)
    {
        printf("%s\t", directories[i]->name);
    }
    printf("\n");
}
Directory* findDirectory(char name[], int numDirectories)
{
    int i;
    for (i = 0; i < numDirectories; i++)
    {
        if (strcmp(directories[i]->name, name) == 0)
        {
            return directories[i];
        }
    }
    return NULL;
}

void displayDirectoryContents(int numDirectories, Directory* dir)
{
   	if(dir->files==NULL)
	   printf("\n%s is Empty\n", dir->name);
        else
	{
        	printf("\n\tContents of directory '%s''\n\n", dir->name);
        	File* current = dir->files;
        	while (current)
        	{
            	printf("%s\t", current->name);
            	current = current->next;
        	}
        	printf("\n");  
	}
}
int deleteDirectory(char* dirName, int numDirectories)
{
    int i, j;
    Directory* dir = findDirectory(dirName, numDirectories);
    if (dir)
    {
        if (dir->files == NULL)
        {
            printf("\nDirectory '%s' has no files associated with it\n", dirName);
            for (i = 0; i < numDirectories; i++)
            {
                if (directories[i] == dir)
                {
                    for ( j = i; j < numDirectories - 1; j++)
                    {
                        directories[j] = directories[j + 1];
                    }
                    numDirectories--;
                    break;
                }
            }
            printf("\nDirectory '%s' Deleted successfully.\n", dirName);
            free(dir);
        }
        else
        {
            int x;
            printf("\nDirectory '%s' has some associated files.\n", dirName);
            printf("\nDo you want to delete all files .\n 1.yes\n2.No\n\nGive your choice : ");
            scanf("%d", &x);
            if (x == 1)
            {
                for (i = 0; i < numDirectories; i++)
                {
                    if (directories[i] == dir)
                    {
                        for ( j = i; j < numDirectories - 1; j++)
                        {
                            directories[j] = directories[j + 1];
                        }
                        numDirectories--;
                        break;
                    }
                }
                while (dir->files)
                {
                    File* temp = dir->files;
                    dir->files = dir->files->next;
                    free(temp);
                }
                free(dir);
                printf("\nDirectory '%s' Deleted along with all the assoicated files.\n", dirName);
            }
            else
            {
                printf("\nDirectory '%s' is not Deleted as it has some assoicated files.\n", dirName);
            }
        }
    }
    else
    {
        printf("\nThere is no such Directory '%s' found.\n", dirName);
    }
    return numDirectories;
}
void deleteFileFromDirectory(Directory* dir, char* fileName)
{
    int found = 0;
    File* current = dir->files;
    File* previous = NULL;

    while (current != NULL)
    {
        if (strcmp(current->name, fileName) == 0)
        {
            found = 1;
            if (previous)
            {
                previous->next = current->next;
            }
            else
            {
                dir->files = current->next;
            }
            free(current);
            printf("\nFile '%s' has been deleted from directory '%s'.\n", fileName, dir->name);
            break;
        }
        previous = current;
        current = current->next;
    }
    if (found == 0)
    {
        printf("\nThere is no such file '%s' found in directory '%s'.\n", fileName, dir->name);
    }
}



[21bcs033@mepcolinux DIR]$cat app.c
#include "head.h"
int main()
{
    char dirName[100];
    char fileName[100];
    int numDirectories = 0, c;
    printf("\n\n\tIMPLEMENTATION OF FILE ORGANIZATION \n\n");
    do
    {
    	printf("\n**********************************\n");
        printf("MENU\n");
        printf("1.Directory Creation\n");
        printf("2.Adding file to Directory\n");
        printf("3.Available Directories\n");
	printf("4.Directory Content\n");
        printf("5.List of Files in Directory\n");
        printf("6.Find a directory\n");
        printf("7.Find a file\n");
	printf("8.Delete a Directory\n");
	printf("9.Delete a File\n");
        printf("10. Exit\n");
        printf("\n**********************************\n");
        printf("\nGive your choice: ");
        scanf("%d", &c);

        switch(c)
        {
            case 1:
            {
            	printf("\n\tDirectory Creation\n");
                printf("\nGive the  directory name : ");
                scanf("%s", dirName);
                Directory* existingDir = findDirectory(dirName, numDirectories);
                if (existingDir != NULL)
                {
                    printf("\n'%s' Directory  already exists\n", dirName);
                }
                else
                {
                    Directory* newDir = createDirectory(dirName);
                    directories[numDirectories] = newDir;
                    numDirectories++;
                    printf("\n'%s' Directory created successfully\n", dirName);
                }
                break;
            }
            case 2:
            {
            	printf("\n\tAdding File to the Directory\n");
                printf("\nGive the file name : ");
                scanf("%s", fileName);
                printf("\nGive the directory name to add that file : ");
                scanf("%s", dirName);
                int flag = 0;
                Directory* dirObj = findDirectory(dirName, numDirectories);
                if (dirObj != NULL)
                {
                    File* existingFile = dirObj->files;
                    while (existingFile)
                    {
                        if (strcmp(existingFile->name, fileName) == 0)
                        {
                            printf("\n'%s' already exists in directory '%s'.\n", fileName, dirName);
                            flag = 1;
                        }
                        existingFile = existingFile->next;
                    }
                    if (flag == 0)
                    {
                        addFileToDirectory(dirObj, fileName);
                        printf("\n'%s' added to the directory '%s'.\n", fileName, dirName);
                    }
                }
                break;
            }
            case 3:
            {
                listAllDirectories(numDirectories);
                break;
            }
            case 4:
            {
		printf("\n\tDirectory Content\n");
                printf("\nGive directory name to display the available files : ");
                scanf("%s", dirName);
                Directory* targetDir = findDirectory(dirName, numDirectories);
                if (targetDir != NULL)
                {
                    printf("\nDirectory '%s' exists.\n", dirName);
                    displayDirectoryContents(numDirectories,targetDir);
                }
                else
                {
                    printf("\nDirectory '%s' does not exist.\n", dirName);
                }
                break;
            }
            case 5:
            {
            	printf("\n\tAvailable Directories And Files\n");        
		int i;  
		if(numDirectories==0)
		{
			printf("\nNo directories found \n");
		}
		else
		{
			for(i=0;i<numDirectories;i++)
                	{
                		displayDirectoryContents(numDirectories,directories[i]);
			}	
		}
                
                break;
            }
            case 6:
            {
            	printf("\n\tSearch for a Directory\n ");
                printf("\nGive the directory name : ");
                scanf("%s", dirName);
                Directory* targetDir = findDirectory(dirName, numDirectories);
                if (targetDir != NULL)
                {
                    printf("\n'%s' exists.\n", dirName);
                }
                else
                {
                    printf("\n'%s' does not exist.\n", dirName);
                }
                break;
            }
            case 7:
            {
            	printf("\n\tSearch for a file\n ");
                printf("\nGive the file name: ");
                scanf("%s", fileName);
                printf("\nFile %s' Available in the following Directories\n\n", fileName);
                int i, flag = 0;
                for (i=0; i<numDirectories; i++)
                {
                    Directory* dirObj = findDirectory(directories[i]->name, numDirectories);
                    if (dirObj != NULL)
                    {
                        File* existingFile = dirObj->files;
                        while (existingFile)
                        {
                            if (strcmp(existingFile->name, fileName) == 0)
                            {
                                printf("* %s\t", directories[i]->name);
                                flag = 1;
                            }
                            existingFile = existingFile->next;
                        }
                        
                    }
                }
                printf("\n");
                if (flag == 0)
                {
                    printf("\n'%s' not found.\n", fileName);
                }
                break;
            }
            case 8:
            {
		printf("\n\tDirectory Deletion\n");
                printf("\nWhich Directory do you want to delete : ");
                scanf("%s", dirName);
                int t = deleteDirectory(dirName, numDirectories);
                numDirectories = t;
                break;
            }
            case 9:
            {
		printf("\n\tFile Deletion\n");
                printf("\nGive the name of file to delete : ");
                scanf("%s", fileName);
                printf("\nFrom Which  directory : ");
                scanf("%s", dirName);
                Directory* dirObj = findDirectory(dirName, numDirectories);
                if (dirObj != NULL)
                {
                    deleteFileFromDirectory(dirObj, fileName);
                }
                else
                {
                    printf("\nDirectory '%s' not found.\n", dirName);
                }
                break;
            }
            case 10:
            	printf("\nExiting..\n");
            	exit(0);
            default:
                printf("\nInvalid choice\n");
        }
    } while (c != 10);
    return 0;
}
[21bcs033@mepcolinux DIR]$cat makefile
file: imp.o app.o
	cc imp.o app.o -o file
imp.o: imp.c
	cc -c imp.c
app.o: app.c
	cc -c app.c
[21bcs033@mepcolinux DIR]$make
make: `file' is up to date.
	IMPLEMENTATION OF FILE ALLOCATION TECHNIQUE

Give the total memory capacity: 150
Give the size of a single block: 10

Total  no of Blocks in the memory : 15
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 1


	FILE ALLOCATION

Give the file name: swe.txt
Give file size: 46

Total  no of Blocks Required : 5

File 'swe.txt' has been allocated successfully
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 3

	Bit Vector

1 - UNALLOCATED
0 - ALLOCATED

1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 2


	ALLOCATED FILE IN MEMORY

NAME	SIZE	BLOCKS ALLOCATED	START	END	LENGTH

swe.txt	46	7,6,14,5,9,			7	9	5

**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 1


	FILE ALLOCATION

Give the file name: ds
Give file size: 234

Total  no of Blocks Required : 10

File 'ds' has been allocated successfully
**********************************************
MENU

1.Allocate File
2.Display Allocated files
3.Display Bit Vector
4.Exit
**********************************************

Give your choice: 4
Exited
[21bcs033@mepcolinux FILE]$cd ..
[21bcs033@mepcolinux EX-11]$cd 
[21bcs033@mepcolinux ~]$cd III-YEAR/SEM-5/OS/EX-12/DIR/
[21bcs033@mepcolinux DIR]$
[21bcs033@mepcolinux DIR]$./file 


	IMPLEMENTATION OF FILE ORGANIZATION 


**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 5

	Available Directories And Files

No directories found 

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 1

	Directory Creation

Give the  directory name : os

'os' Directory created successfully

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 1

	Directory Creation

Give the  directory name : network

'network' Directory created successfully

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 1

	Directory Creation

Give the  directory name : compiler

'compiler' Directory created successfully

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 5

	Available Directories And Files

os is Empty

network is Empty

compiler is Empty

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex1.c

Give the directory name to add that file : os

'ex1.c' added to the directory 'os'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex2.c

Give the directory name to add that file : os

'ex2.c' added to the directory 'os'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex3.c

Give the directory name to add that file : os

'ex3.c' added to the directory 'os'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex1.c

Give the directory name to add that file : network

'ex1.c' added to the directory 'network'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex1.c

Give the directory name to add that file : net

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex4.c

Give the directory name to add that file : network

'ex4.c' added to the directory 'network'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : ex4.c

Give the directory name to add that file : network

'ex4.c' already exists in directory 'network'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 2

	Adding File to the Directory

Give the file name : eg.c

Give the directory name to add that file : compiler

'eg.c' added to the directory 'compiler'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 5

	Available Directories And Files

	Contents of directory 'os''

ex1.c	ex2.c	ex3.c	

	Contents of directory 'network''

ex1.c	ex4.c	

	Contents of directory 'compiler''

eg.c	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 3

	Available Directories

os	network	compiler	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 4

	Directory Content

Give directory name to display the available files : os

Directory 'os' exists.

	Contents of directory 'os''

ex1.c	ex2.c	ex3.c	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 6

	Search for a Directory
 
Give the directory name : compiler

'compiler' exists.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 7

	Search for a file
 
Give the file name: ex1.c

File ex1.c' Available in the following Directories

* os	* network	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 9

	File Deletion

Give the name of file to delete : ex1.c

From Which  directory : network

File 'ex1.c' has been deleted from directory 'network'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 7

	Search for a file
 
Give the file name: ex1.c

File ex1.c' Available in the following Directories

* os	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 8

	Directory Deletion

Which Directory do you want to delete : compiler

Directory 'compiler' has some associated files.

Do you want to delete all files .
 1.yes
2.No

Give your choice : 1

Directory 'compiler' Deleted along with all the assoicated files.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 3

	Available Directories

os	network	

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 8

	Directory Deletion

Which Directory do you want to delete : compiler

There is no such Directory 'compiler' found.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 9

	File Deletion

Give the name of file to delete : ex

From Which  directory : os

There is no such file 'ex' found in directory 'os'.

**********************************
MENU
1.Directory Creation
2.Adding file to Directory
3.Available Directories
4.Directory Content
5.List of Files in Directory
6.Find a directory
7.Find a file
8.Delete a Directory
9.Delete a File
10. Exit

**********************************

Give your choice: 10

Exiting..

[21bcs033@mepcolinux DIR]$exit
exit
