					EX4


WITHOUT ARRIVAL TIME


#include <stdio.h>
#include <stdlib.h>

void FCFS(int *p,int *bt,int *wt,int *tat,int n);
void SJF(int *p,int *bt,int *wt,int *tat,int n);
void Priority(int *p,int *pr,int *bt,int *wt,int *tat,int n);
void Round_Robin(int *p,int *bt,int *wt,int *tat,int *rem_bt,int n,int qt);

#include "head.h"
int main()
{
    int n,i,ch;
    float awt=0,atat=0;
    printf("Enter the number of processes:");
    scanf("%d",&n);
    int *bt = (int*)malloc(n*sizeof(int));
    int *bts = (int*)malloc(n*sizeof(int));
    int *btp = (int*)malloc(n*sizeof(int));
    int *btr = (int*)malloc(n*sizeof(int));
    int *wt = (int*)malloc(n*sizeof(int));
    int *tat = (int*)malloc(n*sizeof(int));
    int *p = (int*)malloc(n*sizeof(int));
    int *pr = (int*)malloc(n*sizeof(int));
    int *rem = (int*)malloc(n*sizeof(int));
    printf("Give the details of the processes\n");
    for(i=0;i<n;i++)
    {
    	printf("\tProcess %d\n",i+1);
    	printf("process id :");
		scanf("%d",&p[i]);
		printf("Burst Time :");        
		scanf("%d",&bt[i]);
		rem[i]=bt[i];
		bts[i]=bt[i];
		btp[i]=bt[i];
		btr[i]=bt[i];
		printf("Priority :");
		scanf("%d",&pr[i]);
    }
    while(1)
    {
        printf("\nOptions\n 1.FCFS Schedule\n 2.SJF Schedule\n 3.Priority Schedule\n 4.Round Robbin\n 5.Exit\n");
        printf("In which method the processes need to be scheduled select number :");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
            {
            	printf("\nFIRST COME FIRST SERVE SCHEDULING\n\n");
                printf("Process\tBurst time\tWaiting time\tTurn around time\n");
                FCFS(p,bt,wt,tat,n);
                break;
            }
            case 2:
            {
                printf("\nSHOREST JOB FIRST SCHEDULING\n\n");
                printf("Process\t burst time\t waiting time\t turn around time\t\n");
                SJF(p,bts,wt,tat,n);
                break;
            }
            case 3:
            {
            	printf("\nPROIRIRY SCHEDULING\n\n");
                printf("Process\tburst time\tPriority\tWaiting time\tTurn around time\n");
                Priority(p,pr,btp,wt,tat,n);
                break;
            }
            case 4:
            {
                int qt;
            	printf("\nROUND ROBIN SCHEDULING\n\n");
                printf("Enter quantum time:");
                scanf("%d",&qt);
                printf("\nProcess\tBurst time\tTurnaround time\tWaiting time\n");
                Round_Robin(p,btr,wt,tat,rem,n,qt);
                break;
            }
            case 5:
            {
                printf("\n Exiting.....\n");
                return 0;
                free(p);
                free(bt);
                free(bts);
                free(btp);
                free(btr);
                free(rem);
                free(tat);
                free(wt);
            }
            default:
            {
                printf("\nEnter the correct choice:");
            }
        }
    }
}

#include "head.h"
void FCFS(int *p,int *bt,int *wt,int *tat,int n)
{
    int i,j;
    float awt=0,atat=0;
    for(i=0;i<n;i++)
    {
        wt[i]=0;
        tat[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]=wt[i]+bt[j];
        }
        tat[i]=wt[i]+bt[i];
        awt = awt+wt[i];
        atat = atat+tat[i];
        printf("%d\t%d\t\t%d\t\t%d\n",p[i],bt[i],wt[i],tat[i]);
            }
    awt = awt/n;
    atat = atat/n;
    printf("Average waiting time :%f\n",awt);
    printf("Average turn around time:%f\n",atat);
}
void SJF(int *p,int *bt,int *wt,int *tat,int n)
{
    int i,j,t;
    float awt=0,atat=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(bt[j]>bt[j+1])
            {
                t = bt[j];
                bt[j] = bt[j+1];
                bt[j+1] = t;
                t = p[j];
                p[j] = p[j+1];
                p[j+1] = t;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        wt[i]=0;
        tat[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]=wt[i]+bt[j];
        }
        tat[i]=wt[i]+bt[i];
        awt = awt+wt[i];
        atat = atat+tat[i];
        printf("%d\t\t %d\t\t %d\t\t %d\n",p[i],bt[i],wt[i],tat[i]);
    }
    awt = awt/n;
    atat = atat/n;
    printf("Average waiting time :%f\n",awt);
    printf("Average turn around time:%f\n",atat);
}
void Priority(int *p,int *pr,int *bt,int *wt,int *tat,int n)
{
    int i,j,t,pos;
    float awt=0,atat=0;
     for(i=0;i<n;i++)
    {
        pos = i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
            {
                pos = j;
            }
        }
        t = pr[i];
        pr[i] = pr[pos];
        pr[pos] = t;
                
        t = bt[i];
        bt[i] = bt[pos];
        bt[pos] = t;
    }
    wt[0] = 0;
    for(i=0;i<n;i++)
    {
        wt[i]=0;
        tat[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]=wt[i]+bt[j];
        }
        tat[i]=wt[i]+bt[i];
        awt = awt+wt[i];
        atat = atat+tat[i];
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\n",p[i],bt[i],pr[i],wt[i],tat[i]);
    }
    awt = awt/n;
    atat = atat/n;
    printf("Average waiting time :%f\n",awt);
    printf("Average turn around time:%f\n",atat);
}
void Round_Robin(int *p,int *bt,int *wt,int *tat,int *rem_bt,int n,int qt)
{
    int temp,sq=0,i,j,count;
    float awt,atat;
    while(1)
    {
        for(i=0,count=0;i<n;i++)
        {
            temp = qt;
            if(rem_bt[i]==0)
            {
                count++;
                continue;
            }
            if(rem_bt[i]>qt)
                rem_bt[i]=rem_bt[i]-qt;
            else
                if(rem_bt[i]>=0)
                {
                    temp = rem_bt[i];
                    rem_bt[i]=0;
                }
                sq = sq + temp;
                tat[i] = sq;
            
        }
        if(n==count)
            break;
	}
    for(i=0;i<n;i++)
    {
        wt[i] = tat[i]-bt[i];
        awt = awt+wt[i];
        atat = atat+tat[i];
        printf("%d\t%d\t\t%d\t\t%d\n",p[i],bt[i],tat[i],wt[i]);
    }
    awt = awt/n;
    atat  = atat/n;
    printf("Average waiting time :%f\n",awt);
    printf("Average turn around time:%f\n",atat);
}





WITH ARRIVAL TIME

[21bcs033@mepcolinux CPUAT]$cat EX4.prn 
Script started on Thursday 03 August 2023 02:15:47 PM IST
[21bcs033@mepcolinux CPUAT]$cat head.h
/*write a c program to implement CPU Schedeuling algorthims like FCFS,SJF,SRTF,Priority,Round robin**/ #include <stdio.h>
void fcfs(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n);
void sjf(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n);
void srtf(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n);
void prioritySchedule(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int *priority, int n);
void roundRobin(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int timequantum, int n);
void preemptivePriority(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int *priority, int n);

[21bcs033@mepcolinux CPUAT]$cat imp.c
#include "head.h"
void fcfs(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n)
{
   int totalwaitingtime = 0;
   int totalturnaroundtime = 0;
   int currenttime = 0;
   int completiontime[n], i, j;
   for (i = 0; i < n; i++)
   {
      completiontime[i] = 0;
   }
   for (i = 0; i < n - 1; i++)
   {
      for (j = 0; j < n - i - 1; j++)
      {
	 if (arrivaltime[j] > arrivaltime[j + 1])
	 {
	    int temp = processlst[j];
	    processlst[j] = processlst[j + 1];
	    processlst[j + 1] = temp;

	    temp = bursttime[j];
	    bursttime[j] = bursttime[j + 1];
	    bursttime[j + 1] = temp;

	    temp = arrivaltime[j];
	    arrivaltime[j] = arrivaltime[j + 1];
	    arrivaltime[j + 1] = temp;
	 }
      }
   }

   for (i = 0; i < n; i++)
   {
      if (arrivaltime[i] > currenttime)
	 currenttime = arrivaltime[i];
      awtime[i] = currenttime - arrivaltime[i];
      totalwaitingtime += awtime[i];
      atattime[i] = awtime[i] + bursttime[i];
      totalturnaroundtime += atattime[i];
      completiontime[i] = currenttime + bursttime[i];
      currenttime = completiontime[i];
   }

   printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}

void sjf(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n)
{
   int currenttime = 0;
   int totalwaitingtime = 0;
   int totalturnaroundtime = 0;
   int completed = 0;
   int s, temp[n], i;
   for (i = 0; i < n; i++)
   {
      temp[i] = bursttime[i];
   }
   while (completed != n)
   {
      s = -1;
      for (i = 0; i < n; i++)
      {
	 if (arrivaltime[i] <= currenttime && temp[i] > 0)
	 {
	    if (s == -1 || temp[i] < temp[s])
	    {
	       s = i;
	    }
	 }
      }
      if (s == -1)
      {
	 currenttime++;
      }
      else
      {
	 awtime[s] = currenttime - arrivaltime[s];
	 totalwaitingtime += awtime[s];
	 currenttime += temp[s];
	 atattime[s] = currenttime - arrivaltime[s];
	 totalturnaroundtime += atattime[s];
	 temp[s] = 0;
	 completed++;
      }
   }
   printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}

void srtf(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int n)
{
   int currenttime = 0;
   int totalwaitingtime = 0;
   int totalturnaroundtime = 0;
   int completed = 0;
   int i, s, min_burst;

   int temp_burst[n];
   for (i = 0; i < n; i++)
      temp_burst[i] = bursttime[i];

   while (completed != n)
   {
      s = -1;
      min_burst = 999999; // A large number
      for (i = 0; i < n; i++)
      {
	 if (arrivaltime[i] <= currenttime && temp_burst[i] > 0 && temp_burst[i] < min_burst)
	 {
	    s = i;
	    min_burst = temp_burst[i];
	 }
      }

      if (s == -1)
      {
	 currenttime++;
      }
      else
      {
	 temp_burst[s]--;
	 if (temp_burst[s] == 0)
	 {
	    completed++;
	    awtime[s] = currenttime - arrivaltime[s] - bursttime[s] + 1;
	    totalwaitingtime += awtime[s];
	    atattime[s] = currenttime - arrivaltime[s] + 1;
	    totalturnaroundtime += atattime[s];
	 }
	 currenttime++;
      }
   }

   printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}
void prioritySchedule(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int *priority, int n)
{
   int currenttime = 0;
   int totalwaitingtime = 0;
   int totalturnaroundtime = 0;
   int completed = 0;
   int s;
   int temp[n], i;
   for (i = 0; i < n; i++)
   {
      temp[i] = bursttime[i];
   }

   while (completed != n)
   {
      s = -1;
      for (i = 0; i < n; i++)
      {
	 if (arrivaltime[i] <= currenttime && temp[i] > 0)
	 {
	    if (s == -1 || priority[i] < priority[s])
	    {
	       s = i;
	    }
	 }
      }

      if (s == -1)
      {
	 currenttime++;
      }
      else
      {
	 awtime[s] = currenttime - arrivaltime[s];
	 totalwaitingtime += awtime[s];
	 currenttime += temp[s];
	 atattime[s] = currenttime - arrivaltime[s];
	 totalturnaroundtime += atattime[s];
	 temp[s] = 0;
	 completed++;
      }
   }
   printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}

void preemptivePriority(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int *priority, int n)
{
   int currenttime = 0;
   int totalwaitingtime = 0;
   int totalturnaroundtime = 0;
   int completed = 0;
   int i, s;

   int temp_burst[n];
   for (i = 0; i < n; i++)
      temp_burst[i] = bursttime[i];

   while (completed != n)
   {
      s = -1;
      for (i = 0; i < n; i++)
      {
	 if (arrivaltime[i] <= currenttime && temp_burst[i] > 0)
	 {
	    if (s == -1 || priority[i] < priority[s])
	    {
	       s = i;
	    }
	 }
      }

      if (s == -1)
      {
	 currenttime++;
      }
      else
      {
	 temp_burst[s]--;
	 if (temp_burst[s] == 0)
	 {
	    completed++;
	    awtime[s] = currenttime - arrivaltime[s] - bursttime[s] + 1;
	    totalwaitingtime += awtime[s];
	    atattime[s] = currenttime - arrivaltime[s] + 1;
	    totalturnaroundtime += atattime[s];
	 }
	 currenttime++;
      }
   }

   printf("\nProcess ID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], priority[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}
void roundRobin(int *processlst, int *bursttime, int *arrivaltime, int *awtime, int *atattime, int timequantum, int n)
{
   int exit_time[n];
   int current_time = 0;
   int completed_processes = 0;
   int totalturnaroundtime = 0;
   int totalwaitingtime = 0;
   int i = 0;

   for (i = 0; i < n; i++)
   {
      exit_time[i] = 0;
   }

   int remaining_time[n];
   for (i = 0; i < n; i++)
   {
      remaining_time[i] = bursttime[i];
   }

   while (completed_processes < n)
   {
      for (i = 0; i < n; i++)
      {
	 if (remaining_time[i] > 0 && arrivaltime[i] <= current_time)
	 {
	    if (remaining_time[i] > timequantum)
	    {
	       current_time += timequantum;
	       remaining_time[i] -= timequantum;
	    }
	    else
	    {
	       current_time += remaining_time[i];
	       remaining_time[i] = 0;
	       completed_processes++;
	       atattime[i] = current_time - arrivaltime[i];
	       awtime[i] = atattime[i] - bursttime[i];
	       totalturnaroundtime += atattime[i];
	       totalwaitingtime += awtime[i];
	    }
	    exit_time[i] = current_time;
	 }
      }
   }

   printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
   for (i = 0; i < n; i++)
   {
      printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processlst[i], arrivaltime[i], bursttime[i], awtime[i], atattime[i]);
   }
   printf("\nTotal Waiting Time: %d ms\n", totalwaitingtime);
   printf("Average Waiting Time: %.2f ms\n", (float)totalwaitingtime / n);
   printf("Total Turnaround Time: %d ms\n", totalturnaroundtime);
   printf("Average Turnaround Time: %.2f ms\n", (float)totalturnaroundtime / n);
}

[21bcs033@mepcolinux CPUAT]$cat app.c
#include "head.h"
int main()
{
   int n, i, choice, timequantum;
   printf("How many number of processes need to be scheduled ? ");
   scanf("%d", &n);

   int processes[n], bursttime[n], arrivaltime[n], awtime[n], atattime[n], priority[n];
   printf("Give the details of the processes\n");

   for (i = 0; i < n; i++)
   {
      printf("\tPROCESS - %d \n",i+1);
      printf("\narrival time for process P%d: ", i+1);
      scanf("%d", &arrivaltime[i]);
      printf("\nburst time for process P%d: ", i+1);
      scanf("%d", &bursttime[i]);
      processes[i] = i+1;
      awtime[i] = 0;
      atattime[i] = 0;
      priority[i] = 0;
   }
   do
   {
      printf("\nSelect the CPU Scheduling Algorithm:\n");
      printf("1. FCFS Scheduling\n");
      printf("2. SJF Scheduling\n");
      printf("3. SRTF Scheduling\n");
      printf("4. Priority Scheduling\n");
      printf("5. Preemptive Priority Scheduling\n");
      printf("6. Round Robin Scheduling\n");
      printf("7. Exit\n");
      printf("-----------------------\nGive your choice: ");
      scanf("%d", &choice);
      switch (choice)
      {
	 case 1:
	    printf("\nFCFS SCHEDULING\n");
	    fcfs(processes, bursttime, arrivaltime, awtime, atattime, n);
	    break;
	 case 2:
	    printf("\nSJF SCHEDULING\n");
	    sjf(processes, bursttime, arrivaltime, awtime, atattime, n);
	    break;
	 case 3:
	    printf("\nSRTF SCHEDULING\n");
	    srtf(processes, bursttime, arrivaltime, awtime, atattime, n);
	    break;
	 case 4:
	    printf("\n PRIORITY SCHEDULING\n");
	    printf("Give the priority for the processes:\n");
	    for (i = 0; i < n; i++)
	    {
	       printf("Process %d:", i);
	       scanf("%d", &priority[i]);
	    }
	    prioritySchedule(processes, bursttime, arrivaltime, awtime, atattime, priority, n);
	    break;
	 case 5:
	    printf("\nPREEMPTIVE PRIORITY SCHEDULING\n");
	    printf("Give the priority for the processes \n");
	    for (i = 0; i < n; i++)
	    {
	       printf("Process %d:", i);
	       scanf("%d", &priority[i]);
	    }
	    preemptivePriority(processes, bursttime, arrivaltime, awtime, atattime, priority, n);
	    break;
	 case 6:
	    printf("\nROUND ROBIN SCHEDULING \n");
	    printf("Give the time quantum: ");
	    scanf("%d", &timequantum);
	    roundRobin(processes, bursttime, arrivaltime, awtime, atattime, timequantum, n);
	    break;
	 case 7:
	    break;
	 default:
	    printf("Invalid choice.\n");
      }
   } while (choice != 7);
   return 0;
}

[21bcs033@mepcolinux CPUAT]$cat makefile
cpu: imp.o app.o
	cc imp.o app.o -o cpu
app.o: app.c
	cc app.c -c
imp.o: imp.c
	cc imp.c -c

[21bcs033@mepcolinux CPUAT]$make
make: `cpu' is up to date.
[21bcs033@mepcolinux CPUAT]$./cpu 
How many number of processes need to be scheduled ? 5
Give the details of the processes
	PROCESS - 1 

arrival time for process P1: 0

burst time for process P1: 14
	PROCESS - 2 

arrival time for process P2: 0

burst time for process P2: 7
	PROCESS - 3 

arrival time for process P3: 0

burst time for process P3: 4
	PROCESS - 4 

arrival time for process P4: 0

burst time for process P4: 6
	PROCESS - 5 

arrival time for process P5: 0

burst time for process P5: 3

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 1

FCFS SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		14		0		14
2		0		7		14		21
3		0		4		21		25
4		0		6		25		31
5		0		3		31		34

Total Waiting Time: 91 ms
Average Waiting Time: 18.20 ms
Total Turnaround Time: 125 ms
Average Turnaround Time: 25.00 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 2

SJF SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		14		20		34
2		0		7		13		20
3		0		4		3		7
4		0		6		7		13
5		0		3		0		3

Total Waiting Time: 43 ms
Average Waiting Time: 8.60 ms
Total Turnaround Time: 77 ms
Average Turnaround Time: 15.40 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 3

SRTF SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		14		20		34
2		0		7		13		20
3		0		4		3		7
4		0		6		7		13
5		0		3		0		3

Total Waiting Time: 43 ms
Average Waiting Time: 8.60 ms
Total Turnaround Time: 77 ms
Average Turnaround Time: 15.40 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 4

 PRIORITY SCHEDULING
Give the priority for the processes:
Process 0:3 2 1 4 2
Process 1:Process 2:Process 3:Process 4:
Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		14		14		28
2		0		7		4		11
3		0		4		0		4
4		0		6		28		34
5		0		3		11		14

Total Waiting Time: 57 ms
Average Waiting Time: 11.40 ms
Total Turnaround Time: 91 ms
Average Turnaround Time: 18.20 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 5

PREEMPTIVE PRIORITY SCHEDULING
Give the priority for the processes 
Process 0:3 2 1 4 2
Process 1:Process 2:Process 3:Process 4:
Process ID	Arrival Time	Burst Time	Priority	Waiting Time	Turnaround Time
1		0		14		3		14		28
2		0		7		2		4		11
3		0		4		1		0		4
4		0		6		4		28		34
5		0		3		2		11		14

Total Waiting Time: 57 ms
Average Waiting Time: 11.40 ms
Total Turnaround Time: 91 ms
Average Turnaround Time: 18.20 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 6

ROUND ROBIN SCHEDULING 
Give the time quantum: 3

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		14		20		34
2		0		7		22		29
3		0		4		18		22
4		0		6		19		25
5		0		3		12		15

Total Waiting Time: 91 ms
Average Waiting Time: 18.20 ms
Total Turnaround Time: 125 ms
Average Turnaround Time: 25.00 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 7
[21bcs033@mepcolinux CPUAT]$./cpu 
How many number of processes need to be scheduled ? 5
Give the details of the processes
	PROCESS - 1 

arrival time for process P1: 0

burst time for process P1: 4
	PROCESS - 2 

arrival time for process P2: 1

burst time for process P2: 3
	PROCESS - 3 

arrival time for process P3: 2

burst time for process P3: 1
	PROCESS - 4 

arrival time for process P4: 3

burst time for process P4: 5
	PROCESS - 5 

arrival time for process P5: 4

burst time for process P5: 2

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 1

FCFS SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		4		0		4
2		1		3		3		6
3		2		1		5		6
4		3		5		5		10
5		4		2		9		11

Total Waiting Time: 22 ms
Average Waiting Time: 4.40 ms
Total Turnaround Time: 37 ms
Average Turnaround Time: 7.40 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 2

SJF SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		4		0		4
2		1		3		6		9
3		2		1		2		3
4		3		5		7		12
5		4		2		1		3

Total Waiting Time: 16 ms
Average Waiting Time: 3.20 ms
Total Turnaround Time: 31 ms
Average Turnaround Time: 6.20 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 3

SRTF SCHEDULING

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		4		1		5
2		1		3		6		9
3		2		1		0		1
4		3		5		7		12
5		4		2		1		3

Total Waiting Time: 15 ms
Average Waiting Time: 3.00 ms
Total Turnaround Time: 30 ms
Average Turnaround Time: 6.00 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 4

 PRIORITY SCHEDULING
Give the priority for the processes:
Process 0:5 4 3 2 2
Process 1:Process 2:Process 3:Process 4:
Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		4		0		4
2		1		3		11		14
3		2		1		9		10
4		3		5		1		6
5		4		2		5		7

Total Waiting Time: 26 ms
Average Waiting Time: 5.20 ms
Total Turnaround Time: 41 ms
Average Turnaround Time: 8.20 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 5

PREEMPTIVE PRIORITY SCHEDULING
Give the priority for the processes 
Process 0:5 4 3 2 2
Process 1:Process 2:Process 3:Process 4:
Process ID	Arrival Time	Burst Time	Priority	Waiting Time	Turnaround Time
1		0		4		5		11		15
2		1		3		4		8		11
3		2		1		3		0		1
4		3		5		2		0		5
5		4		2		2		4		6

Total Waiting Time: 23 ms
Average Waiting Time: 4.60 ms
Total Turnaround Time: 38 ms
Average Turnaround Time: 7.60 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 6

ROUND ROBIN SCHEDULING 
Give the time quantum: 3

Process ID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1		0		4		9		13
2		1		3		2		5
3		2		1		4		5
4		3		5		7		12
5		4		2		6		8

Total Waiting Time: 28 ms
Average Waiting Time: 5.60 ms
Total Turnaround Time: 43 ms
Average Turnaround Time: 8.60 ms

Select the CPU Scheduling Algorithm:
1. FCFS Scheduling
2. SJF Scheduling
3. SRTF Scheduling
4. Priority Scheduling
5. Preemptive Priority Scheduling
6. Round Robin Scheduling
7. Exit
-----------------------
Give your choice: 7
[21bcs033@mepcolinux CPUAT]$exit
exit

