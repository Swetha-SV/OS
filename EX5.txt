					EX5
[21bcs033@mepcolinux EX-5]$cat EX5.prn 
Script started on Wednesday 23 August 2023 03:39:55 PM IST
[21bcs033@mepcolinux EX-5]$cat producer.c 
/*
 * C program to work with Semaphore system call.
 * C program that the producer process should generate a random number and apply modulus 1000 on that number
 * */
#include <stdio.h>
#include <sys/types.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 30
union Produce
{
   int val;
   struct semid_ds *buf;
   unsigned short sema[3];
   struct seminfo *_buf;
}p;
void wait(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *)malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = -1;
   t = semop(id, op, 1);
}
void signal(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *)malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = 1;
   t = semop(id, op, 1);
}

int main()
{
   int i, shmid,num,semid, *a, n, t;
   printf("\nEnter the no of terms to produce : ");
   scanf("%d", &n);
   shmid = shmget((key_t)90, (SIZE*sizeof(int)), 0766 | IPC_CREAT);
   if (shmid == -1)
   {
      printf("Error in creating shared memory \n");
      exit(0);
   }
   a = shmat(shmid, NULL, 0766);
   semid = semget( (key_t)789, 3, 0777 | IPC_CREAT | IPC_EXCL);
   if (semid == -1)
   {
      printf("Error in creating semaphore \n");
      exit(0);
   }
   p.sema[0] = 1; //mutex
   p.sema[1] = 0; //full status
   p.sema[2] = (short)n; // empty status
   t = semctl( semid, 0, SETALL, &p);
   *(a + 0)  = n;
   *(a + 1) = 0;
   t = semctl (semid, 0, GETALL, p);
   srand(time(0));
   printf("The numbers produced are : ");
   for (i = 2; i <= n + 1; i++)
   {
      wait(semid, 2);
      wait(semid, 0);
      num = rand()%1000;
      *(a + i) = num;
      printf("%d\n", num);
      signal(semid, 0);
      signal(semid, 1);
   }
   while (* (a + 1) == 0);
   if (* (a + 1) == -99)
   {
      shmdt(a);
      shmctl(shmid, IPC_RMID, NULL);
      semctl(semid, 0, IPC_RMID, NULL);
   }
   printf("\n");
   return 0;
}
[21bcs033@mepcolinux EX-5]$cat consumer.c 
/*
 * C program that the consumer process has to reverse the number generated by the producer
 * */
#include <stdio.h>
#include <sys/types.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdlib.h>
#define SIZE 30
union Consume
{
   int val;
   struct semid_ds *buf;
   unsigned short sema[3];
   struct seminfo *_buf;
}c;
void wait(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *) malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = -1;
   t = semop(id, op, 1);
}
void signal(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *) malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = 1;
   t = semop(id, op, 1);
}
int reverse(int n)
{
   int rem=0,sum=0;
   while (n != 0)
   {
      rem = n % 10;
      sum = sum * 10 + rem;
      n = n/10;
   }
   return sum;
}
int main()
{
   int i, semid, num, shmid, *a, n, t;
   shmid = shmget( (key_t)90, (SIZE * sizeof(int)), 0766);
   if (shmid == -1)
   {
      printf("Error in shared memory creation\n");
      exit(0);
   }
   a = (int *)shmat(shmid, NULL, 0766);
   semid = semget( (key_t)789, 3, 0777);
   if (semid == -1)
   {
      printf("Error in semaphore creation\n");
      exit(0);
   }
   n = * (a + 0);
   t = semctl( semid, 0, GETALL,c);
   for (i = 2; i <= n + 1; i++)
   {
      wait(semid, 1);
      wait(semid, 0);
      num = * (a + i);
      printf("The number is : %d\t",num);
      printf("The reverse of the number is : %d \n", reverse(num));
      signal(semid, 0);
      signal(semid, 2);
   }
   * (a + 1) = -99;
   shmdt(a);
   printf("\n");
   return 0;
}

[21bcs033@mepcolinux EX-5]$cc producer.c 
[21bcs033@mepcolinux EX-5]$./a.out 

Enter the no of terms to produce : 5
The numbers produced are : 383
886
777
915
793

[21bcs033@mepcolinux EX-5]$cc consumer.c 

[21bcs033@mepcolinux EX-5]$
[21bcs033@mepcolinux EX-5]$./a.out 
The number is : 383	The reverse of the number is : 383 
The number is : 886	The reverse of the number is : 688 
The number is : 777	The reverse of the number is : 777 
The number is : 915	The reverse of the number is : 519 
The number is : 793	The reverse of the number is : 397 

[21bcs033@mepcolinux EX-5]$exit
exit

Script done on Wednesday 23 August 2023 03:41:10 PM IST
[21bcs033@mepcolinux EX-5]$cat conprime.c 
#include <stdio.h>
#include <sys/types.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdlib.h>
#define SIZE 30
union Consume
{
   int val;
   struct semid_ds *buf;
   unsigned short sema[3];
   struct seminfo *_buf;
}c;
void wait(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *) malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = -1;
   t = semop(id, op, 1);
}
void signal(int id, short num)
{
   int t;
   struct sembuf *op = (struct sembuf *) malloc(sizeof(struct sembuf));
   op -> sem_num = id;
   op -> sem_op  = 1;
   t = semop(id, op, 1);
}
int is_prime(int num) {
    if (num <= 1) {
        return 0;
    }
    int i;
    for ( i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    return 1;
}
int main()
{
   int i, semid, num, shmid, *a, n, t;
   shmid = shmget( (key_t)90, (SIZE * sizeof(int)), 0766);
   if (shmid == -1)
   {
      printf("Error in shared memory creation\n");
      exit(0);
   }
   a = (int *)shmat(shmid, NULL, 0766);
   semid = semget( (key_t)0712, 3, 0777);
   if (semid == -1)
   {
      printf("Error in semaphore creation\n");
      exit(0);
   }
   n = * (a + 0);
   t = semctl( semid, 0, GETALL,c);
   printf("Prime numbers \n");
   for (i = 2; i <= n + 1; i++)
   {
      wait(semid, 1);
      wait(semid, 0);
      num = * (a + i);
      if(is_prime(num))
      {
       printf("%d\t",num);
      }
      signal(semid, 0);
      signal(semid, 2);
   }
   * (a + 1) = -99;
   shmdt(a);
   printf("\n");
   return 0;
}

