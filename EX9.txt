				EX 9

[21bcs033@mepcolinux PAGE]$cat EX9.prn 
Script started on Thursday 21 September 2023 02:28:00 PM IST
[21bcs033@mepcolinux PAGE]$cat head.h 
/*
 * C program to implement the page memory management technique like FIFO ,optimal and LRU 
 * Find No.of Pagefaults & Hits
 * */
#include <stdio.h>
#include <stdlib.h>
int FIFO(int framesnos, int npageref, int *pagelst);
int LRU(int framesnos, int npageref, int *pagelst);
int Optimal(int framesnos, int npageref, int *pagelst);
int findIndex(int *frame, int framenos, int *counter);
int isAvail(int page, int *frame, int framenos);
[21bcs033@mepcolinux PAGE]$cat imp.c
#include "head.h"
int findIndex (int *frame, int framenos, int *counter)
{
   int index = 0, min = counter[0], i;
   for (i=0; i<framenos; i++)
   {
      if (counter[i] < min)
      {
         min = counter[i];
         index = i;
      }
   }
   return index;
}
int isAvail (int page, int *frame, int framenos)
{
   int i;
   for (i=0; i<framenos; i++)
   {
      if (frame[i] == page)
      {
         return 1;
      }
   }
   return 0;
}
int FIFO(int framenos, int npageref, int *pagelst)
{
   printf("Reference\tPage in Frame\t\tHit/Miss\n\n");
   int pageFaults=0, frame[30], counter[30], i, j;
   for (i=0; i<framenos; i++)
   {
      frame[i] = -1;
      counter[i] = -1;
   }
   for (i=0; i<npageref; i++)
   {
      int current = pagelst[i];
      printf("%d\t\t", pagelst[i]);
      if (isAvail(current, frame, framenos) == 0)
      {
         pageFaults++;
         int replace = findIndex(frame, framenos, counter);
         frame[replace] = current;
         counter[replace] = i+1;
         for (j=0; j<framenos; j++)
         {
            if(frame[j]==-1)
         		printf("\t");
         	else
            	printf("%d\t", frame[j]);
         }
         printf("Miss\n");
      }
      else
      {
         for (j=0; j<framenos; j++)
         {
            printf("\t");
         }
         printf("Hit\n");
      }
   }
   return pageFaults;
}
int LRU(int framenos, int npageref, int *pagelst)
{
   int pageFaults=0, frame[30], counter[30], i, j;
   printf("Reference\tPage in Frame\t\tHit/Miss\n\n");
   for (i=0; i<framenos; i++)
   {
      frame[i] = -1;
      counter[i] = -1;
   }
   for (i=0; i<npageref; i++)
   {
      int current = pagelst[i];
      printf("%d\t\t", pagelst[i]);
      if (isAvail(current, frame, framenos) == 0)
      {
         pageFaults++;
         int replace = findIndex(frame, framenos, counter);
         frame[replace] = current;
         counter[replace] = i+1;
         for (j=0; j<framenos; j++)
         {
            if(frame[j]==-1)
         		printf("\t");
         	else
            	printf("%d\t", frame[j]);
         }
         printf("Miss\n");
      }
      else
      {
         for (j=0; j<framenos; j++)
         {
            if (frame[j] == current)
            {
               counter[j] = i+1;
               break;
            }
         }
         for (j=0; j<framenos; j++)
         {
            printf("\t");
         }
         printf("Hit\n");
      }
   }
   return pageFaults;
}
int Optimal(int framenos, int npageref, int *pagelst)
{
   int pageFaults=0, frame[30], i, j, k;
   for (i=0; i<framenos; i++)
   {
      frame[i] = -1;
   }
   printf("Referece\tPage in Frame\t\tHit/Miss\n\n");
   for (i=0; i<npageref; i++)
   {
      int current = pagelst[i];
      printf("%d\t\t", pagelst[i]);
      if (isAvail(current, frame, framenos) == 0)
      {
         pageFaults++;
         int replace = -1;
         int use = -1;
         for (j=0; j<framenos; j++)
         {
            int next = -1;
            for (k=i+1; k<npageref; k++)
            {
               if (pagelst[k] == frame[j])
               {
                  next = k;
                  break;
               }
            }
            if (next == -1)
            {
               replace = j;
               break;
            }
            if (next > use)
            {
               use = next;
               replace = j;
            }
         }
         frame[replace] = current;
         for (j=0; j<framenos; j++)
         {
         	if(frame[j]==-1)
         		printf("\t");
         	else
            	printf("%d\t", frame[j]);
         }
         printf("Miss\n");
      }
      else
      {
         for (j=0; j<framenos; j++)
         {
            printf("\t");
         }
         printf("Hit\n");
      }
   }
   return pageFaults;
}

[21bcs033@mepcolinux PAGE]$cat app.c
#include "head.h"
int main()
{
   int framenos, npageref, pagelst[3330], i;
   printf("\t\tPAGE REPLACEMENT ALGORTHIMS\n\n");
   printf("Give the Frame size : ");
   scanf("%d", &framenos);
   printf("Give the length of the Reference string : ");
   scanf("%d", &npageref);
   printf("Page reference string : \n");
   for (i=0; i<npageref; i++)
      scanf("%d", &pagelst[i]);
   int choice, fault;
   do
   {
      printf("\n------------------\nPAGE REPLACEMENT ALGORTHIMS\n1.FIFO\n2.LRU\n3.OPTIMAL\n4.EXIT\n------------------\n\n");
      printf("Give your choice : ");
      scanf("%d", &choice);
      switch (choice)
      {
         case 1:
            printf("\n\tFIFO PAGE REPLACEMENT ALGORTHIM\n\n");
            fault = FIFO(framenos, npageref, pagelst);
            printf("\nNo. of Page faults : %d\n", fault);
            printf("No. of Page hits : %d\n", npageref - fault);
            break;
         case 2:
            printf("\n\tLRU PAGE REPLACEMENT ALGORTHIM\n\n");
            fault = LRU(framenos, npageref, pagelst);
            printf("\nNo. of Page faults : %d\n", fault);
            printf("\nNo. of Page hits : %d\n", npageref - fault);
            break;
         case 3:
            printf("\n\tOPTIMAL PAGE REPLACEMENT ALGORTHIM\n\n");
            fault = Optimal(framenos, npageref, pagelst);
            printf("\nNo. of Page faults : %d\n", fault);
            printf("\nNo. of Page hits : %d\n", npageref - fault);
            break;
        case 4:
        	printf("\nEXiting..\n");
            break;
        default:
            printf("Invalid choice\n");
      }
   } while (choice != 4);
   return 0;
}

[21bcs033@mepcolinux PAGE]$cat makefile
page: imp.o app.o
	cc imp.o app.o -o page
imp.o: imp.c
	cc -c imp.c
app.o: app.c
	cc -c app.c

[21bcs033@mepcolinux PAGE]$make
make: `page' is up to date.
[21bcs033@mepcolinux PAGE]$./page 
		PAGE REPLACEMENT ALGORTHIMS

Give the Frame size : 3
Give the length of the Reference string : 20
Page reference string : 
3 1 4 2 5 4 1 3 5 2 0 1 1 0 2 3 4 5 0 1

------------------
PAGE REPLACEMENT ALGORTHIMS
1.FIFO
2.LRU
3.OPTIMAL
4.EXIT
------------------

Give your choice : 1

	FIFO PAGE REPLACEMENT ALGORTHIM

Reference	Page in Frame		Hit/Miss

3		3			Miss
1		3	1		Miss
4		3	1	4	Miss
2		2	1	4	Miss
5		2	5	4	Miss
4					Hit
1		2	5	1	Miss
3		3	5	1	Miss
5					Hit
2		3	2	1	Miss
0		3	2	0	Miss
1		1	2	0	Miss
1					Hit
0					Hit
2					Hit
3		1	3	0	Miss
4		1	3	4	Miss
5		5	3	4	Miss
0		5	0	4	Miss
1		5	0	1	Miss

No. of Page faults : 15
No. of Page hits : 5

------------------
PAGE REPLACEMENT ALGORTHIMS
1.FIFO
2.LRU
3.OPTIMAL
4.EXIT
------------------

Give your choice : 2

	LRU PAGE REPLACEMENT ALGORTHIM

Reference	Page in Frame		Hit/Miss

3		3			Miss
1		3	1		Miss
4		3	1	4	Miss
2		2	1	4	Miss
5		2	5	4	Miss
4					Hit
1		1	5	4	Miss
3		1	3	4	Miss
5		1	3	5	Miss
2		2	3	5	Miss
0		2	0	5	Miss
1		2	0	1	Miss
1					Hit
0					Hit
2					Hit
3		2	0	3	Miss
4		2	4	3	Miss
5		5	4	3	Miss
0		5	4	0	Miss
1		5	1	0	Miss

No. of Page faults : 16

No. of Page hits : 4

------------------
PAGE REPLACEMENT ALGORTHIMS
1.FIFO
2.LRU
3.OPTIMAL
4.EXIT
------------------

Give your choice : 3

	OPTIMAL PAGE REPLACEMENT ALGORTHIM

Referece	Page in Frame		Hit/Miss

3		3			Miss
1		3	1		Miss
4		3	1	4	Miss
2		2	1	4	Miss
5		5	1	4	Miss
4					Hit
1					Hit
3		5	1	3	Miss
5					Hit
2		2	1	3	Miss
0		2	1	0	Miss
1					Hit
1					Hit
0					Hit
2					Hit
3		3	1	0	Miss
4		4	1	0	Miss
5		5	1	0	Miss
0					Hit
1					Hit

No. of Page faults : 11

No. of Page hits : 9

------------------
PAGE REPLACEMENT ALGORTHIMS
1.FIFO
2.LRU
3.OPTIMAL
4.EXIT
------------------

Give your choice : 4

EXiting..
[21bcs033@mepcolinux PAGE]$exit 
exit

